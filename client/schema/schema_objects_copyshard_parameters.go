//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSchemaObjectsCopyshardParams creates a new SchemaObjectsCopyshardParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSchemaObjectsCopyshardParams() *SchemaObjectsCopyshardParams {
	return &SchemaObjectsCopyshardParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSchemaObjectsCopyshardParamsWithTimeout creates a new SchemaObjectsCopyshardParams object
// with the ability to set a timeout on a request.
func NewSchemaObjectsCopyshardParamsWithTimeout(timeout time.Duration) *SchemaObjectsCopyshardParams {
	return &SchemaObjectsCopyshardParams{
		timeout: timeout,
	}
}

// NewSchemaObjectsCopyshardParamsWithContext creates a new SchemaObjectsCopyshardParams object
// with the ability to set a context for a request.
func NewSchemaObjectsCopyshardParamsWithContext(ctx context.Context) *SchemaObjectsCopyshardParams {
	return &SchemaObjectsCopyshardParams{
		Context: ctx,
	}
}

// NewSchemaObjectsCopyshardParamsWithHTTPClient creates a new SchemaObjectsCopyshardParams object
// with the ability to set a custom HTTPClient for a request.
func NewSchemaObjectsCopyshardParamsWithHTTPClient(client *http.Client) *SchemaObjectsCopyshardParams {
	return &SchemaObjectsCopyshardParams{
		HTTPClient: client,
	}
}

/*
SchemaObjectsCopyshardParams contains all the parameters to send to the API endpoint

	for the schema objects copyshard operation.

	Typically these are written to a http.Request.
*/
type SchemaObjectsCopyshardParams struct {

	// ClassName.
	ClassName string

	// ShardName.
	ShardName string

	// SourceNode.
	SourceNode string

	// TargetNode.
	TargetNode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the schema objects copyshard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchemaObjectsCopyshardParams) WithDefaults() *SchemaObjectsCopyshardParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the schema objects copyshard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SchemaObjectsCopyshardParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithTimeout(timeout time.Duration) *SchemaObjectsCopyshardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithContext(ctx context.Context) *SchemaObjectsCopyshardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithHTTPClient(client *http.Client) *SchemaObjectsCopyshardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClassName adds the className to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithClassName(className string) *SchemaObjectsCopyshardParams {
	o.SetClassName(className)
	return o
}

// SetClassName adds the className to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetClassName(className string) {
	o.ClassName = className
}

// WithShardName adds the shardName to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithShardName(shardName string) *SchemaObjectsCopyshardParams {
	o.SetShardName(shardName)
	return o
}

// SetShardName adds the shardName to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetShardName(shardName string) {
	o.ShardName = shardName
}

// WithSourceNode adds the sourceNode to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithSourceNode(sourceNode string) *SchemaObjectsCopyshardParams {
	o.SetSourceNode(sourceNode)
	return o
}

// SetSourceNode adds the sourceNode to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetSourceNode(sourceNode string) {
	o.SourceNode = sourceNode
}

// WithTargetNode adds the targetNode to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) WithTargetNode(targetNode string) *SchemaObjectsCopyshardParams {
	o.SetTargetNode(targetNode)
	return o
}

// SetTargetNode adds the targetNode to the schema objects copyshard params
func (o *SchemaObjectsCopyshardParams) SetTargetNode(targetNode string) {
	o.TargetNode = targetNode
}

// WriteToRequest writes these params to a swagger request
func (o *SchemaObjectsCopyshardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param className
	if err := r.SetPathParam("className", o.ClassName); err != nil {
		return err
	}

	// query param shardName
	qrShardName := o.ShardName
	qShardName := qrShardName
	if qShardName != "" {

		if err := r.SetQueryParam("shardName", qShardName); err != nil {
			return err
		}
	}

	// query param sourceNode
	qrSourceNode := o.SourceNode
	qSourceNode := qrSourceNode
	if qSourceNode != "" {

		if err := r.SetQueryParam("sourceNode", qSourceNode); err != nil {
			return err
		}
	}

	// query param targetNode
	qrTargetNode := o.TargetNode
	qTargetNode := qrTargetNode
	if qTargetNode != "" {

		if err := r.SetQueryParam("targetNode", qTargetNode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
