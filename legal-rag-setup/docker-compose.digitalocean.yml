version: '3.8'

# Digital Ocean Optimized Docker Compose Configuration
# This configuration is optimized for Digital Ocean infrastructure including
# Spaces for S3-compatible storage, managed databases, and droplet resources

services:
  weaviate:
    image: semitechnologies/weaviate:latest
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      # Core Configuration
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY}'
      AUTHENTICATION_APIKEY_USERS: 'legal-user@firm.com'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      
      # Modules Configuration - Optimized for Digital Ocean
      ENABLE_MODULES: 'text2vec-openai,text2vec-transformers,generative-openai,backup-s3'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      
      # Performance Optimization for Digital Ocean Droplets
      GOMAXPROCS: '${GOMAXPROCS:-4}'
      PERSISTENCE_MEMTABLES_MAX_SIZE: '1000'
      PERSISTENCE_MEMTABLES_FLUSH_IDLE_AFTER_SECONDS: '15'
      TRACK_VECTOR_DIMENSIONS: 'true'
      
      # Cluster Configuration
      CLUSTER_HOSTNAME: 'legal-weaviate-node'
      LOG_LEVEL: '${LOG_LEVEL:-info}'
      LOG_FORMAT: 'json'
      
      # External API Configuration
      OPENAI_APIKEY: '${OPENAI_API_KEY}'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
      
      # Digital Ocean Spaces Configuration (S3-compatible)
      BACKUP_S3_BUCKET: '${DO_SPACES_BUCKET}'
      BACKUP_S3_ENDPOINT: '${DO_SPACES_ENDPOINT}'
      BACKUP_S3_USE_SSL: 'true'
      AWS_ACCESS_KEY_ID: '${DO_SPACES_ACCESS_KEY_ID}'
      AWS_SECRET_ACCESS_KEY: '${DO_SPACES_SECRET_ACCESS_KEY}'
      AWS_REGION: '${DO_SPACES_REGION}'
      
      # Monitoring Configuration
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_PORT: '2112'
      PROMETHEUS_MONITORING_GROUP_CLASSES: 'true'
      
      # Digital Ocean specific optimizations
      PERSISTENCE_LSM_ACCESS_STRATEGY: 'mmap'
      PERSISTENCE_LSM_MAX_SEGMENT_SIZE: '500'
      
    volumes:
      - weaviate_data:/var/lib/weaviate
      - ./legal-docs:/legal-docs:ro
      - ./logs:/var/log/weaviate
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${WEAVIATE_MEMORY_LIMIT:-6G}
          cpus: '${WEAVIATE_CPU_LIMIT:-3.5}'
        reservations:
          memory: 4G
          cpus: '2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - legal-rag-network

  # Local transformers for sensitive legal data processing
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2
    environment:
      ENABLE_CUDA: '0'  # Set to '1' if GPU droplet is used
      MAX_WORKERS: '2'
      WORKER_TIMEOUT: '120'
    ports:
      - "8081:8080"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    networks:
      - legal-rag-network

  # Legal-specific BERT model for enhanced legal document understanding
  legal-embeddings:
    image: semitechnologies/transformers-inference:sentence-transformers-all-mpnet-base-v2
    environment:
      ENABLE_CUDA: '0'
      MAX_WORKERS: '1'
      WORKER_TIMEOUT: '180'
    ports:
      - "8082:8080"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    networks:
      - legal-rag-network

  # Nginx reverse proxy for SSL termination and load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - weaviate
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    networks:
      - legal-rag-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - legal-rag-network

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - legal-rag-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - legal-rag-network

  # Container monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    restart: unless-stopped
    networks:
      - legal-rag-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME:-localhost}
      - GF_SMTP_ENABLED=false
    restart: unless-stopped
    networks:
      - legal-rag-network

  # Application API server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "5000:5000"
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET}
      - DO_SPACES_ACCESS_KEY_ID=${DO_SPACES_ACCESS_KEY_ID}
      - DO_SPACES_SECRET_ACCESS_KEY=${DO_SPACES_SECRET_ACCESS_KEY}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT}
      - ENVIRONMENT=production
    volumes:
      - ./legal-docs:/app/legal-docs:ro
      - ./logs:/app/logs
    depends_on:
      - weaviate
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
    networks:
      - legal-rag-network

  # Background task processor
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    command: celery -A app.celery worker --loglevel=info
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET}
      - DO_SPACES_ACCESS_KEY_ID=${DO_SPACES_ACCESS_KEY_ID}
      - DO_SPACES_SECRET_ACCESS_KEY=${DO_SPACES_SECRET_ACCESS_KEY}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT}
    volumes:
      - ./legal-docs:/app/legal-docs:rw
      - ./logs:/app/logs
    depends_on:
      - redis
      - weaviate
    restart: unless-stopped
    networks:
      - legal-rag-network

  # Backup service for automated backups to Digital Ocean Spaces
  backup-service:
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET}
      - DO_SPACES_ACCESS_KEY_ID=${DO_SPACES_ACCESS_KEY_ID}
      - DO_SPACES_SECRET_ACCESS_KEY=${DO_SPACES_SECRET_ACCESS_KEY}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - ./backups:/app/backups
      - ./logs:/app/logs
    depends_on:
      - weaviate
    restart: unless-stopped
    networks:
      - legal-rag-network

volumes:
  weaviate_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/legal-rag/data/weaviate
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/legal-rag/data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/legal-rag/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/legal-rag/data/grafana

networks:
  legal-rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
