//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSchemaObjectsCopyshardParams creates a new SchemaObjectsCopyshardParams object
//
// There are no default values defined in the spec.
func NewSchemaObjectsCopyshardParams() SchemaObjectsCopyshardParams {

	return SchemaObjectsCopyshardParams{}
}

// SchemaObjectsCopyshardParams contains all the bound params for the schema objects copyshard operation
// typically these are obtained from a http.Request
//
// swagger:parameters schema.objects.copyshard
type SchemaObjectsCopyshardParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ClassName string
	/*
	  Required: true
	  In: query
	*/
	ShardName string
	/*
	  Required: true
	  In: query
	*/
	SourceNode string
	/*
	  Required: true
	  In: query
	*/
	TargetNode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSchemaObjectsCopyshardParams() beforehand.
func (o *SchemaObjectsCopyshardParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rClassName, rhkClassName, _ := route.Params.GetOK("className")
	if err := o.bindClassName(rClassName, rhkClassName, route.Formats); err != nil {
		res = append(res, err)
	}

	qShardName, qhkShardName, _ := qs.GetOK("shardName")
	if err := o.bindShardName(qShardName, qhkShardName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSourceNode, qhkSourceNode, _ := qs.GetOK("sourceNode")
	if err := o.bindSourceNode(qSourceNode, qhkSourceNode, route.Formats); err != nil {
		res = append(res, err)
	}

	qTargetNode, qhkTargetNode, _ := qs.GetOK("targetNode")
	if err := o.bindTargetNode(qTargetNode, qhkTargetNode, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClassName binds and validates parameter ClassName from path.
func (o *SchemaObjectsCopyshardParams) bindClassName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClassName = raw

	return nil
}

// bindShardName binds and validates parameter ShardName from query.
func (o *SchemaObjectsCopyshardParams) bindShardName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("shardName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("shardName", "query", raw); err != nil {
		return err
	}
	o.ShardName = raw

	return nil
}

// bindSourceNode binds and validates parameter SourceNode from query.
func (o *SchemaObjectsCopyshardParams) bindSourceNode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sourceNode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("sourceNode", "query", raw); err != nil {
		return err
	}
	o.SourceNode = raw

	return nil
}

// bindTargetNode binds and validates parameter TargetNode from query.
func (o *SchemaObjectsCopyshardParams) bindTargetNode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("targetNode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("targetNode", "query", raw); err != nil {
		return err
	}
	o.TargetNode = raw

	return nil
}
